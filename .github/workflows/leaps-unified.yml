name: LEAPS Unified (produce + consume)

on:
  schedule:
    - cron: "50 18 * * 1-5"     # single UTC schedule; time gate handles PDT/PST
  workflow_dispatch:
    inputs:
      skip_time_gate:
        description: "Skip time gate (manual runs only)"
        required: false
        default: "false"
        type: choice
        options: ["false","true"]
      force_run:
        description: "Force producer even if today's data exists"
        required: false
        default: "false"
        type: choice
        options: ["false","true"]
      target_date:
        description: "Target YYYY-MM-DD (optional)"
        required: false
        type: string

concurrency:
  group: leaps-unified-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  WF_VERSION: "1.0.1"
  PYTHON_VERSION: "3.11"
  DESIRED_PT_TIME: "10:50"
  WINDOW_MIN: "95"                # wide gate for both PST/PDT
  DATA_RETENTION_DAYS: "30"

defaults:
  run:
    shell: bash

jobs:
  # ============================================
  # 1) INIT / TIME GATE
  # ============================================
  init-time-gate:
    if: ${{ github.repository == 'Sevenon7/Tradier_Options' }}
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    outputs:
      run_ok: ${{ steps.tgate.outputs.run_ok }}
      date_utc: ${{ steps.setdate.outputs.date_utc }}
      date_pt:  ${{ steps.setdate.outputs.date_pt }}
    steps:
      - name: Validate required secrets
        run: |
          if [[ -z "${{ secrets.TRADIER_TOKEN }}" ]]; then
            echo "::error::TRADIER_TOKEN secret is not configured"; exit 1; fi

      - name: Resolve target dates (UTC & PT)
        id: setdate
        run: |
          set -euo pipefail
          if [[ -n "${{ github.event.inputs.target_date || '' }}" ]]; then
            DU="${{ github.event.inputs.target_date }}"
            date -d "$DU" +%Y-%m-%d >/dev/null 2>&1 || { echo "::error::Bad date $DU"; exit 1; }
          else
            DU="$(date -u +%Y-%m-%d)"
          fi
          TZ=America/Los_Angeles DP="$(date +%Y-%m-%d)"
          echo "date_utc=$DU" >> "$GITHUB_OUTPUT"
          echo "date_pt=$DP"   >> "$GITHUB_OUTPUT"
          {
            echo "### 🚀 Init"
            echo "- UTC date: \`$DU\`"
            echo "- PT date : \`$DP\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Time gate (America/Los_Angeles)
        id: tgate
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.skip_time_gate || 'false' }}" == "true" ]]; then
            echo "run_ok=true" >> "$GITHUB_OUTPUT"
            echo "⏭️ Time gate skipped (manual override)" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          export TZ=America/Los_Angeles
          NOW_PT="$(date +%H:%M)"
          TGT_PT="${DESIRED_PT_TIME}"
          DOW="$(date +%u)"
          if [[ "$DOW" -gt 5 ]]; then
            echo "run_ok=false" >> "$GITHUB_OUTPUT"
            echo "⏸️ Weekend; skipping" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          now_s="$(date -d "$NOW_PT" +%s)"
          tgt_s="$(date -d "$TGT_PT" +%s)"
          diff="$(( now_s - tgt_s ))"; [[ $diff -lt 0 ]] && diff=$((-diff))
          delta="$(( diff / 60 ))"
          if [[ "$delta" -le "$WINDOW_MIN" ]]; then
            echo "run_ok=true"  >> "$GITHUB_OUTPUT"
            echo "✅ Within window ($delta min)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "run_ok=false" >> "$GITHUB_OUTPUT"
            echo "⏸️ Outside window ($delta min > ${WINDOW_MIN})" >> "$GITHUB_STEP_SUMMARY"
          fi

  # ============================================
  # 2) PRODUCER
  # ============================================
  producer:
    needs: init-time-gate
    if: needs.init-time-gate.outputs.run_ok == 'true'
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    permissions:
      contents: write
    outputs:
      produced_dir: ${{ steps.move.outputs.dir }}
      already:      ${{ steps.skip.outputs.already }}
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0

      - name: Install system deps
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends curl jq coreutils dos2unix
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Setup Python
        uses: actions/setup-python@cfd55ca82492758d853442341ad4d8010466803a
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Pin requirements
        run: |
          printf '%s\n' \
            'requests==2.32.3' \
            'pandas==2.2.2' \
            'numpy==1.26.4' \
            'python-dateutil==2.9.0.post0' > requirements.txt

      - name: Install Python deps
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
          PIP_NO_INPUT: "1"
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Normalize line endings (guard)
        run: |
          set -euo pipefail
          find . -type f \( -name "*.sh" -o -name "*.py" -o -name "*.yml" \) -print0 | xargs -0 dos2unix || true

      - name: Check if producer already ran (by PT date)
        id: skip
        run: |
          set -euo pipefail
          DPT="${{ needs.init-time-gate.outputs.date_pt }}"
          if [[ "${{ github.event.inputs.force_run || 'false' }}" == "true" ]]; then
            echo "already=false" >> "$GITHUB_OUTPUT"
            echo "🔄 Force run enabled" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          if [[ -s "data/${DPT}/overlay_vwap_macd_rsi.csv" ]]; then
            echo "already=true"  >> "$GITHUB_OUTPUT"
            echo "⏭️ Data already present: data/${DPT}" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "already=false" >> "$GITHUB_OUTPUT"
            echo "✨ Producing data for PT date: ${DPT}" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Run main LEAPS script
        if: steps.skip.outputs.already == 'false'
        env:
          TRADIER_TOKEN: ${{ secrets.TRADIER_TOKEN }}
        run: |
          set -euo pipefail
          python leaps_batched_cached.py

      - name: Build Option P/L (fallback-safe)
        if: steps.skip.outputs.already == 'false'
        env:
          TRADIER_TOKEN: ${{ secrets.TRADIER_TOKEN }}
        run: |
          set -euo pipefail
          if [[ -f tools/option_pl_builder.py ]]; then
            python tools/option_pl_builder.py || echo "::warning::option_pl builder failed (non-blocking)"
          fi

      - name: Enrich with VWAP data (imports tools/*)
        if: steps.skip.outputs.already == 'false'
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          if [[ -f tools/enrich_overlay_with_vwap.py ]]; then
            python tools/enrich_overlay_with_vwap.py --overlay overlay_vwap_macd_rsi.csv || \
              echo "::warning::VWAP enrichment failed (non-blocking)"
          fi

      - name: Move artifacts into date dir
        id: move
        run: |
          set -euo pipefail
          D="${{ needs.init-time-gate.outputs.date_pt }}"
          DEST="data/${D}"
          mkdir -p "$DEST"
          n=0
          for f in overlay_vwap_macd_rsi.csv option_pl.csv gapdown_above_100sma.csv vwap_missing.json; do
            [[ -f "$f" ]] && { mv -f "$f" "$DEST/"; n=$((n+1)); }
          done
          echo "dir=${D}" >> "$GITHUB_OUTPUT"
          echo "📦 Moved $n files → $DEST" >> "$GITHUB_STEP_SUMMARY"

      - name: Commit artifacts (data only)
        if: steps.skip.outputs.already == 'false'
        uses: stefanzweifel/git-auto-commit-action@28e16e81777b558cc906c8750092100bbb34c5e3
        with:
          commit_message: "LEAPS: data ${{ needs.init-time-gate.outputs.date_pt }} (WF v${{ env.WF_VERSION }})"
          add_options: -A
          file_pattern: |
            data/${{ steps.move.outputs.dir }}/*

  # ============================================
  # 3) PUBLISH (latest.json + analysis_digest.json + Pages)
  # ============================================
  publish:
    needs: [init-time-gate, producer]
    if: needs.init-time-gate.outputs.run_ok == 'true'
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pages: write
    outputs:
      dir: ${{ steps.eff.outputs.dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Determine effective dir
        id: eff
        run: |
          set -euo pipefail
          CAND="${{ needs.producer.outputs.produced_dir || needs.init-time-gate.outputs.date_pt }}"
          if [[ ! -d "data/${CAND}" ]]; then
            CAND="$(find data -maxdepth 1 -type d -name "20*" -printf '%f\n' | sort | tail -1)"
          fi
          [[ -z "$CAND" ]] && { echo "::error::no data directory found"; exit 1; }
          echo "dir=$CAND" >> "$GITHUB_OUTPUT"
          echo "✅ Effective dir: data/$CAND" >> "$GITHUB_STEP_SUMMARY"

      - name: Build latest.json + analysis_digest.json
        env:
          DDIR: ${{ steps.eff.outputs.dir }}
        run: |
          set -euo pipefail
          jq -n \
            --arg dd "data/${DDIR}" \
            --arg ts "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{date_dir:$dd,generated_utc:$ts}' > latest.json

          python - <<'PY'
          import os, json, pandas as pd
          dd = os.environ["DDIR"]
          base = f"data/{dd}"
          digest = {"date_dir": base, "files": {}}

          def meta(name, cols=None, n=30):
              p = f"{base}/{name}"
              if not os.path.exists(p): return {"status":"missing"}
              try:
                  df = pd.read_csv(p)
                  out = {"status":"ok","rows":int(df.shape[0]),"columns":int(df.shape[1])}
                  if cols:
                      cols=[c for c in cols if c in df.columns]
                      if cols:
                          out["preview"]=df[cols].head(n).to_dict(orient="records")
                  return out
              except Exception as e:
                  return {"status":"error","error":str(e)}

          digest["files"]["overlay"]=meta("overlay_vwap_macd_rsi.csv",
              ["Ticker","RSI14","MACD>Signal","VWAP","LastPx","Px_vs_VWAP","SMA100","Gap%","Guidance"])
          digest["files"]["option_pl"]=meta("option_pl.csv")
          digest["files"]["gap"]=meta("gapdown_above_100sma.csv")

          with open("analysis_digest.json","w") as f: json.dump(digest,f,indent=2)
          PY

      - name: Commit pointers + digest
        uses: stefanzweifel/git-auto-commit-action@28e16e81777b558cc906c8750092100bbb34c5e3
        with:
          commit_message: "LEAPS: refresh pointers & digest (data/${{ steps.eff.outputs.dir }})"
          add_options: -A
          file_pattern: |
            latest.json
            analysis_digest.json

      - name: Prepare Pages
        run: |
          set -euo pipefail
          rm -rf pages_pub
          mkdir -p pages_pub/data/"${{ steps.eff.outputs.dir }}"
          cp -a "data/${{ steps.eff.outputs.dir }}/." "pages_pub/data/${{ steps.eff.outputs.dir }}/"
          cp latest.json analysis_digest.json pages_pub/
          printf '%s\n' "<!doctype html><title>LEAPS Data</title><h1>LEAPS</h1><ul>
          <li><a href='latest.json'>latest.json</a></li>
          <li><a href='analysis_digest.json'>analysis_digest.json</a></li></ul>" > pages_pub/index.html

      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: pages_pub
          keep_files: true
          enable_jekyll: false

  # ============================================
  # 4) CONSUMER (optional summary)
  # ============================================
  consumer:
    needs: [init-time-gate, publish]
    if: needs.init-time-gate.outputs.run_ok == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
      - name: Quick summary
        run: |
          echo "### Consumer summary" >> "$GITHUB_STEP_SUMMARY"
          ls -lh "data/${{ needs.publish.outputs.dir }}" || true

  # ============================================
  # 5) NOTIFY
  # ============================================
  notify:
    needs: [init-time-gate, producer, publish, consumer]
    if: always()
    runs-on: ubuntu-24.04
    steps:
      - name: Summarize run
        run: |
          {
            echo "## 📋 Workflow Summary (v${WF_VERSION})"
            echo "| Job      | Result |"
            echo "|----------|--------|"
            echo "| init     | ${{ needs.init-time-gate.result }} |"
            echo "| producer | ${{ needs.producer.result }} |"
            echo "| publish  | ${{ needs.publish.result }} |"
            echo "| consumer | ${{ needs.consumer.result }} |"
          } >> "$GITHUB_STEP_SUMMARY"
