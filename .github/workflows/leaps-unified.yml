name: LEAPS Unified (produce + consume)

on:
  schedule:
    - cron: "50 17,18 * * 1-5"   # single UTC schedule; PT time gate handles DST
  workflow_dispatch:
    inputs:
      skip_time_gate:
        description: "Skip time gate (manual runs only)"
        required: false
        default: "false"
        type: choice
        options: ["false","true"]
      force_run:
        description: "Force producer even if today's data exists"
        required: false
        default: "false"
        type: choice
        options: ["false","true"]
      target_date:
        description: "Target YYYY-MM-DD (optional)"
        required: false
        type: string

concurrency:
  group: leaps-unified-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  DESIRED_PT_TIME: "10:50"
  WINDOW_MIN: "95"
  REPO: "Sevenon7/Tradier_Options"
  BRANCH: "main"
  OWNER: "Sevenon7"
  DATA_RETENTION_DAYS: "30"

defaults:
  run:
    shell: bash

jobs:
  init-time-gate:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read
    outputs:
      run_ok: ${{ steps.tgate.outputs.run_ok }}
      date_dir: ${{ steps.setdate.outputs.date_dir }}
    steps:
      - name: Validate required secrets
        run: |
          if [[ -z "${{ secrets.TRADIER_TOKEN }}" ]]; then
            echo "::error::TRADIER_TOKEN secret is not configured"; exit 1; fi
          if [[ -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "::error::GITHUB_TOKEN is not available"; exit 1; fi

      - name: Mask tokens (hygiene)
        run: |
          echo "::add-mask::${{ secrets.TRADIER_TOKEN }}"
          echo "::add-mask::${{ secrets.GITHUB_TOKEN }}"

      - name: Resolve target date (UTC)
        id: setdate
        run: |
          set -euo pipefail
          if [[ -n "${{ github.event.inputs.target_date || '' }}" ]]; then
            DD="${{ github.event.inputs.target_date }}"
            if ! date -d "$DD" +%Y-%m-%d >/dev/null 2>&1; then
              echo "::error::Invalid date format: $DD"; exit 1; fi
          else
            DD="$(date -u +%Y-%m-%d)"
          fi
          echo "date_dir=${DD}" >> "$GITHUB_OUTPUT"
          {
            echo "### 🚀 Init"
            echo "- Target (UTC): \`${DD}\`"
            echo "- Trigger: \`${{ github.event_name }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Time Gate (America/Los_Angeles)
        id: tgate
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.skip_time_gate || 'false' }}" == "true" ]]; then
            echo "run_ok=true" >> "$GITHUB_OUTPUT"
            echo "⏭️ Time gate skipped by manual override" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          export TZ=America/Los_Angeles
          NOW_PT="$(date +%H:%M)"
          DOW="$(date +%u)"
          if [[ "$DOW" -gt 5 ]]; then
            echo "run_ok=false" >> "$GITHUB_OUTPUT"
            echo "⛔ Weekend — skipping" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          TARGET_PT="${DESIRED_PT_TIME}"
          now_s="$(date -d "$NOW_PT" +%s)"
          tgt_s="$(date -d "$TARGET_PT" +%s)"
          diff="$(( now_s - tgt_s ))"; [[ $diff -lt 0 ]] && diff="$(( -diff ))"
          delta="$(( diff / 60 ))"

          if [[ "$delta" -le "$WINDOW_MIN" ]]; then
            echo "run_ok=true" >> "$GITHUB_OUTPUT"
            echo "✅ Within window: ${NOW_PT} vs ${TARGET_PT}" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "run_ok=false" >> "$GITHUB_OUTPUT"
            echo "⏸️ Outside window: ${NOW_PT} vs ${TARGET_PT}" >> "$GITHUB_STEP_SUMMARY"
          fi

  producer:
    needs: init-time-gate
    if: needs.init-time-gate.outputs.run_ok == 'true'
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    permissions:
      contents: write
      pages: write
    outputs:
      produced_date: ${{ steps.resolve-dd.outputs.dd_effective }}
      already: ${{ steps.skip.outputs.already }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system deps
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends curl jq coreutils dos2unix
          sudo apt-get clean && sudo rm -rf /var/lib/apt/lists/*

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create requirements.txt (deterministic)
        run: |
          printf '%s\n' \
            'requests==2.32.3' \
            'pandas==2.2.2' \
            'numpy==1.26.4' \
            'python-dateutil==2.9.0.post0' > requirements.txt

      - name: Install Python deps (deterministic)
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
          PIP_NO_INPUT: "1"
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Normalize line endings (heredoc guard)
        run: |
          set -euo pipefail
          find . -type f \( -name "*.sh" -o -name "*.py" -o -name "*.yml" -o -name "*.yaml" \) -print0 | xargs -0 dos2unix || true

      - name: Check if producer already ran (UTC)
        id: skip
        run: |
          set -euo pipefail
          DD="${{ needs.init-time-gate.outputs.date_dir }}"
          if [[ "${{ github.event.inputs.force_run || 'false' }}" == "true" ]]; then
            echo "already=false" >> "$GITHUB_OUTPUT"
            echo "🔄 Force run enabled" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          if [[ -s "data/${DD}/overlay_vwap_macd_rsi.csv" ]]; then
            echo "already=true"  >> "$GITHUB_OUTPUT"
            echo "⏭️ Producer already completed for data/${DD}" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "already=false" >> "$GITHUB_OUTPUT"
            echo "✨ Producer will execute for data/${DD}" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Run main LEAPS script
        if: steps.skip.outputs.already == 'false'
        env:
          TRADIER_TOKEN: ${{ secrets.TRADIER_TOKEN }}
        run: python leaps_batched_cached.py

      - name: Build Option P/L (fallback-safe)
        if: steps.skip.outputs.already == 'false'
        env:
          TRADIER_TOKEN: ${{ secrets.TRADIER_TOKEN }}
        run: |
          if [[ -f tools/option_pl_builder.py ]]; then
            python tools/option_pl_builder.py || echo "::warning::option_pl_builder failed"
          fi

      - name: Enrich with intraday VWAP (PYTHONPATH set)
        if: steps.skip.outputs.already == 'false'
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          if [[ -f tools/enrich_overlay_with_vwap.py ]]; then
            python tools/enrich_overlay_with_vwap.py --overlay overlay_vwap_macd_rsi.csv || echo "::warning::VWAP enrich failed"
          fi

      - name: Move artifacts into date dir (if new)
        if: steps.skip.outputs.already == 'false'
        id: resolve-dd
        env:
          DD: ${{ needs.init-time-gate.outputs.date_dir }}
        run: |
          set -euo pipefail
          DEST="data/${DD}"
          mkdir -p "${DEST}"
          for f in overlay_vwap_macd_rsi.csv option_pl.csv gapdown_above_100sma.csv vwap_missing.json; do
            [[ -f "$f" ]] && mv -f "$f" "${DEST}/"
          done
          echo "dd_effective=${DD}" >> "$GITHUB_OUTPUT"

      - name: Build/refresh latest.json & analysis_digest.json (always)
        if: ${{ always() }}
        id: meta
        env:
          DD_REQ: ${{ needs.init-time-gate.outputs.date_dir }}
        run: |
          set -euo pipefail
          pick_folder() {
            local dd="$1"
            if [[ -s "data/${dd}/overlay_vwap_macd_rsi.csv" ]]; then echo "${dd}"; return 0; fi
            if [[ -d data ]]; then
              find data -maxdepth 1 -type d -name "20*" -printf '%f\n' | sort | tac | \
                while read d; do
                  [[ -s "data/${d}/overlay_vwap_macd_rsi.csv" ]] && { echo "$d"; return 0; }
                done
            fi
            echo ""
          }
          DD_USE="$(pick_folder "${DD_REQ}")"
          if [[ -z "${DD_USE}" ]]; then
            echo "::error::No usable data folder (missing overlay_vwap_macd_rsi.csv)"; exit 1
          fi

          jq -n --arg dd "${DD_USE}" --arg ts "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{date_dir: ("data/" + $dd), generated_utc: $ts}' > latest.json

          export DD_USE
          python - <<'PY'
          import os, json, pandas as pd
          from datetime import datetime
          dd = os.environ["DD_USE"]
          base = f"data/{dd}"
          def analyze(name, cols=None, head=30):
              p = f"{base}/{name}"
              if not os.path.exists(p): return {"status":"missing"}
              try:
                  df = pd.read_csv(p)
                  info = {"status":"ok","rows":int(df.shape[0]),"columns":int(df.shape[1])}
                  if cols:
                      use = [c for c in cols if c in df.columns]
                      if use: info["preview"]=df[use].head(head).to_dict(orient="records")
                  return info
              except Exception as e:
                  return {"status":"error","error":str(e)}
          digest = {
            "date_dir": f"data/{dd}",
            "generated_utc": datetime.utcnow().isoformat()+"Z",
            "files": {
              "overlay":   analyze("overlay_vwap_macd_rsi.csv",
                                   ["Ticker","RSI14","MACD>Signal","VWAP","LastPx","Px_vs_VWAP","SMA100","Gap%","Guidance"]),
              "option_pl": analyze("option_pl.csv"),
              "gap":       analyze("gapdown_above_100sma.csv")
            }
          }
          with open("analysis_digest.json","w") as f:
              json.dump(digest,f,indent=2)
          PY

      - name: Commit artifacts (metadata always; data dir only when new)
        if: ${{ always() }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "LEAPS: refresh pointers & artifacts"
          branch: ${{ env.BRANCH }}
          add_options: "-A"
          file_pattern: |
            latest.json
            analysis_digest.json
            data/${{ steps.resolve-dd.outputs.dd_effective || needs.init-time-gate.outputs.date_dir }}/*

      - name: Prepare GitHub Pages payload (always)
        if: ${{ always() }}
        run: |
          set -euo pipefail
          DD="${{ steps.resolve-dd.outputs.dd_effective || needs.init-time-gate.outputs.date_dir }}"
          rm -rf pages_pub
          mkdir -p "pages_pub/data/${DD}"
          [[ -d "data/${DD}" ]] && cp -a "data/${DD}/." "pages_pub/data/${DD}/"
          cp -a latest.json analysis_digest.json pages_pub/
          cat > pages_pub/index.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <title>LEAPS Data</title>
          <h1>📊 LEAPS Options Data</h1>
          <ul>
            <li><a href="latest.json">latest.json</a></li>
            <li><a href="analysis_digest.json">analysis_digest.json</a></li>
          </ul>
          HTML

      - name: Deploy to GitHub Pages (always)
        if: ${{ always() }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: pages_pub
          keep_files: true
          enable_jekyll: false

      - name: Cleanup old data dirs (best effort)
        continue-on-error: true
        run: |
          if [[ -d data ]]; then
            find data -maxdepth 1 -type d -name "20*" -mtime +${DATA_RETENTION_DAYS} -print -exec rm -rf {} + || true
          fi

  consumer:
    needs: [init-time-gate, producer]
    if: needs.init-time-gate.outputs.run_ok == 'true'
    runs-on: ubuntu-24.04
    timeout-minutes: 12
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system deps
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends curl jq coreutils python3
          sudo apt-get clean && sudo rm -rf /var/lib/apt/lists/*

      - name: Make fetch tool executable
        run: |
          [[ -f tools/fetch.sh ]] && chmod +x tools/fetch.sh || { echo "::error::tools/fetch.sh missing"; exit 1; }

      - name: Resolve effective date dir (prefer latest.json; else newest ≤ today; else yesterday)
        id: datedir
        run: |
          set -euo pipefail
          TODAY="$(date -u +%Y-%m-%d)"
          CAND=""
          if [[ -s latest.json ]]; then
            ptr="$(jq -r '.date_dir // empty' latest.json | sed 's|^data/||')"
            if [[ "$ptr" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ && -s "data/${ptr}/overlay_vwap_macd_rsi.csv" ]]; then
              CAND="$ptr"
            fi
          fi
          if [[ -z "$CAND" && -d data ]]; then
            CAND="$(find data -maxdepth 1 -type d -name "20*" -printf '%f\n' | sort | tail -1)"
          fi
          if [[ -z "$CAND" ]]; then
            CAND="$(date -u -d 'yesterday' +%Y-%m-%d)"
          fi
          echo "date_dir=${CAND}" >> "$GITHUB_OUTPUT"
          echo "📅 Using date_dir=${CAND}" >> "$GITHUB_STEP_SUMMARY"

      - name: Fetch overlay/PL/gap (local → Pages → jsDelivr → raw)
        env:
          DD: ${{ steps.datedir.outputs.date_dir }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ env.REPO }}
          BRANCH: ${{ env.BRANCH }}
          OWNER: ${{ env.OWNER }}
        run: |
          set -euo pipefail
          found=0
          for f in overlay_vwap_macd_rsi.csv option_pl.csv gapdown_above_100sma.csv; do
            src="data/${DD}/${f}"
            if [[ -s "$src" ]]; then cp "$src" "$(basename "$f" .csv).csv"; found=$((found+1)); fi
          done
          if [[ $found -eq 0 ]]; then
            ./tools/fetch.sh \
              "data/${DD}/overlay_vwap_macd_rsi.csv" overlay.csv \
              "data/${DD}/option_pl.csv"            option_pl.csv \
              "data/${DD}/gapdown_above_100sma.csv" gap.csv
          fi

  notify:
    needs: [init-time-gate, producer, consumer]
    if: always()
    runs-on: ubuntu-24.04
    steps:
      - name: Final summary
        run: |
          {
            echo "## Run status"
            echo "- Time gate: ${{ needs.init-time-gate.result }}"
            echo "- Producer:  ${{ needs.producer.result }}"
            echo "- Consumer:  ${{ needs.consumer.result }}"
          } >> "$GITHUB_STEP_SUMMARY"
