name: LEAPS Unified (produce + consume)

on:
  schedule:
    # 10:50 AM local PT (DST-aware)
    # PDT (Mar–Oct) 17:50 UTC, Mon–Fri
    - cron: '50 17 * 3-10 1-5'
    # PST (Nov–Feb) 18:50 UTC, Mon–Fri
    - cron: '50 18 * 11,12,1,2 1-5'
  workflow_dispatch:

permissions:
  contents: write
  pages: write

env:
  PYTHON_VERSION: "3.11"
  DESIRED_PT_TIME: "10:50"   # local PT
  WINDOW_MIN: "600"           # ± minutes guard window
  REPO: "Sevenon7/Tradier_Options"
  BRANCH: "main"
  OWNER: "Sevenon7"

jobs:
  run-all:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---- TIME GATE (America/Los_Angeles) ----
      - name: Time Gate (America/Los_Angeles)
        id: tgate
        shell: bash
        run: |
          set -euo pipefail
          export TZ=America/Los_Angeles

          NOW_PT="$(date +%H:%M)"
          TARGET_PT="${DESIRED_PT_TIME}"

          now_s="$(date -d "$NOW_PT" +%s)"
          tgt_s="$(date -d "$TARGET_PT" +%s)"
          diff="$(( now_s - tgt_s ))"; [ "$diff" -lt 0 ] && diff="$(( -diff ))"
          DELTA="$(( diff / 60 ))"

          echo "Now PT: ${NOW_PT} | Target PT: ${TARGET_PT} | |Δ|min: ${DELTA}"
          if [ "${DELTA}" -le "${WINDOW_MIN}" ]; then
            echo "run_ok=true"  >> "$GITHUB_OUTPUT"
          else
            echo "run_ok=false" >> "$GITHUB_OUTPUT"
            echo "Not within ±${WINDOW_MIN} minutes — fast exit."
          fi

      # ----- OS tools -----
      - name: Ensure OS tools (curl, jq)
        if: steps.tgate.outputs.run_ok == 'true'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl jq coreutils

      # ----- requirements BEFORE setup-python (and with fallback) -----
      - name: Ensure requirements.txt
        if: steps.tgate.outputs.run_ok == 'true'
        shell: bash
        run: |
          set -euo pipefail
          printf '%s\n' \
            'requests' \
            'pandas' \
            'numpy' \
            'python-dateutil' > requirements.txt
          echo "----- requirements.txt -----"
          cat requirements.txt

      - name: Setup Python
        if: steps.tgate.outputs.run_ok == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Show Python version
        if: steps.tgate.outputs.run_ok == 'true'
        run: python -V

      - name: Install deps (with fallback)
        if: steps.tgate.outputs.run_ok == 'true'
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if ! pip install -r requirements.txt; then
            echo "Primary install failed — attempting best-effort fallback."
            pip install requests pandas numpy python-dateutil || true
          fi

      - name: Mask token (log hygiene)
        if: steps.tgate.outputs.run_ok == 'true'
        run: echo "::add-mask::${{ secrets.TRADIER_TOKEN }}"

      # ---- Skip Producer if today's folder already exists (UTC) ----
      - name: Skip if already ran today (UTC)
        id: skipcheck
        if: steps.tgate.outputs.run_ok == 'true'
        shell: bash
        run: |
          set -euo pipefail
          DATE_DIR="data/$(date -u +%Y-%m-%d)"
          if [ -d "$DATE_DIR" ]; then
            echo "already=true"  >> "$GITHUB_OUTPUT"
            echo "Run already completed for $DATE_DIR — skipping Producer steps."
          else
            echo "already=false" >> "$GITHUB_OUTPUT"
          fi

      # ===== PRODUCER =====
      - name: Run overlay script (your original)
        if: steps.tgate.outputs.run_ok == 'true' && steps.skipcheck.outputs.already == 'false'
        shell: bash
        env:
          TRADIER_TOKEN: ${{ secrets.TRADIER_TOKEN }}
        run: |
          set -euo pipefail
          python leaps_batched_cached.py

      - name: Build Actual Option P/L (fallback-safe)
        if: steps.tgate.outputs.run_ok == 'true' && steps.skipcheck.outputs.already == 'false'
        env:
          TRADIER_TOKEN: ${{ secrets.TRADIER_TOKEN }}
        run: |
          if [ -f tools/option_pl_builder.py ]; then
            python tools/option_pl_builder.py
          else
            echo "tools/option_pl_builder.py not present; skipping."
          fi

      - name: Enrich overlay with intraday VWAP (optional)
        if: steps.tgate.outputs.run_ok == 'true' && steps.skipcheck.outputs.already == 'false'
        run: |
          if [ -f tools/enrich_overlay_with_vwap.py ]; then
            python tools/enrich_overlay_with_vwap.py --overlay overlay_vwap_macd_rsi.csv || true
          fi

      - name: Commit daily artifacts to repo
        if: steps.tgate.outputs.run_ok == 'true' && steps.skipcheck.outputs.already == 'false'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "LEAPS daily overlay (producer)"
          branch: ${{ env.BRANCH }}
          add_options: '-A'

      # ---- Only publish mirror if today's folder actually exists ----
      - name: Check today dir exists
        if: steps.tgate.outputs.run_ok == 'true'
        id: todaydir
        shell: bash
        run: |
          set -euo pipefail
          D="data/$(date -u +%Y-%m-%d)"
          if [ -d "$D" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "path=$D"     >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish CSV mirror to gh-pages
        if: steps.tgate.outputs.run_ok == 'true' && steps.todaydir.outputs.exists == 'true'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ steps.todaydir.outputs.path }}
          destination_dir: ${{ steps.todaydir.outputs.path }}
          keep_files: true

      # ===== CONSUMER =====
      - name: Make fetch tool executable
        if: steps.tgate.outputs.run_ok == 'true'
        run: chmod +x ./tools/fetch.sh

      - name: Resolve effective date_dir (prefer ≤24h pointer; else newest existing ≤ today)
        if: steps.tgate.outputs.run_ok == 'true'
        id: datedir
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ env.REPO }}
          BRANCH: ${{ env.BRANCH }}
        run: |
          set -euo pipefail
          mkdir -p tmp
          TODAY="$(date -u +%Y-%m-%d)"

          # Try pointer
          ./tools/fetch.sh latest.json tmp/latest.json || true

          # Always list /data so we know what exists
          curl -fsSL -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            "https://api.github.com/repos/${REPO}/contents/data?ref=${BRANCH}" > tmp/list.json

          python - <<'PY' > tmp/dd.txt
          import os, json, re, datetime, sys
          today = os.environ.get("TODAY")
          with open("tmp/list.json","r",encoding="utf-8") as f:
              arr = json.load(f)
          
          # All existing YYYY-MM-DD dirs
          dates = sorted(
              [x["name"] for x in arr if x.get("type")=="dir" and re.fullmatch(r"\d{4}-\d{2}-\d{2}", x.get("name",""))]
          )
          if not dates:
              print("ERROR: no date folders in /data", file=sys.stderr)
              sys.exit(1)
          
          today_dt = datetime.datetime.strptime(today, "%Y-%m-%d")
          # Newest existing date ≤ today
          valid = [d for d in dates if datetime.datetime.strptime(d, "%Y-%m-%d") <= today_dt]
          cand  = valid[-1] if valid else dates[-1]
          
          # If latest.json exists and is fresh (≤24h) and present in repo, prefer it
          ptr = None
          try:
              with open("tmp/latest.json","r",encoding="utf-8") as f:
                  j = json.load(f)
              ptr = (j.get("date_dir") or "").split("/")[-1]
              if re.fullmatch(r"\d{4}-\d{2}-\d{2}", ptr) and ptr in dates:
                  ptr_dt = datetime.datetime.strptime(ptr, "%Y-%m-%d")
                  age_h  = (today_dt - ptr_dt).total_seconds()/3600.0
                  if 0 <= age_h <= 24:
                      cand = ptr
          except Exception:
              pass
          
          print(cand)
          PY
          RES="$(cat tmp/dd.txt)"
          echo "Resolved DATE_DIR=${RES}"
          echo "date_dir=${RES}" >> "$GITHUB_OUTPUT"

      - name: Fetch overlay/PL/gap with fallback chain (raw → API → Pages)
        if: steps.tgate.outputs.run_ok == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ env.REPO }}
          BRANCH: ${{ env.BRANCH }}
          OWNER: ${{ env.OWNER }}
        shell: bash
        run: |
          set -euo pipefail
          DD="${{ steps.datedir.outputs.date_dir }}"
          ./tools/fetch.sh \
            "data/${DD}/overlay_vwap_macd_rsi.csv" overlay.csv \
            "data/${DD}/option_pl.csv"            option_pl.csv \
            "data/${DD}/gapdown_above_100sma.csv" gap.csv

      - name: Emit quick summary to Job Summary
        if: steps.tgate.outputs.run_ok == 'true'
        run: |
          {
            echo "### LEAPS Overlay (${OWNER}/${REPO} → ${BRANCH})"
            echo ""
            echo "**date_dir:** ${{ steps.datedir.outputs.date_dir }}"
            echo ""
            echo "**overlay.csv (head):**"; head -5 overlay.csv || true
            echo ""; echo "**option_pl.csv (head):**"; head -5 option_pl.csv || true
            echo ""; echo "**gapdown_above_100sma.csv (head):**"; head -5 gap.csv || true
          } >> "$GITHUB_STEP_SUMMARY"
