name: LEAPS Unified (produce + consume)

on:
  # 10:50 AM local PT, DST-aware (Mon–Fri)
  schedule:
    # PDT months (Mar–Oct) → 17:50 UTC
    - cron: '50 17 * 3-10 1-5'
    # PST months (Nov–Feb) → 18:50 UTC
    - cron: '50 18 * 11,12,1,2 1-5'
  workflow_dispatch:

permissions:
  contents: write    # commit output + publish gh-pages
  pages: write

env:
  PYTHON_VERSION: "3.11"
  DESIRED_PT_TIME: "10:50"     # target local PT fire time
  WINDOW_MIN: "35"             # ± minutes allowed around target (keeps single daily run)
  REPO: "Sevenon7/Tradier_Options"
  BRANCH: "main"
  OWNER: "Sevenon7"

jobs:
  run-all:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Echo trigger info
        run: echo "event=${{ github.event_name }} cron=${{ github.event_name == 'schedule' && github.event.schedule || 'n/a' }}"
  
      - name: Set up job
        run: echo "Starting unified producer+consumer…"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---- TIME GATE (America/Los_Angeles) ----
      - name: Time Gate (America/Los_Angeles)
        id: tgate
        shell: bash
        run: |
          set -euo pipefail
          export TZ=America/Los_Angeles
      
          NOW_PT="$(date +%H:%M)"
          TARGET_PT="${DESIRED_PT_TIME}"   # e.g., 10:50
      
          # Compute |Δ| minutes between NOW_PT and TARGET_PT via a one-liner (no heredoc)
          DELTA="$(python -c "from datetime import datetime as d; \
      now=d.strptime('${NOW_PT}','%H:%M'); tgt=d.strptime('${TARGET_PT}','%H:%M'); \
      print(abs(int((now-tgt).total_seconds()/60)))")"
      
          echo "Now PT: ${NOW_PT} | Target PT: ${TARGET_PT} | |Δ|min: ${DELTA}"
          if [ "${DELTA}" -le "${WINDOW_MIN}" ]; then
            echo "run_ok=true"  >> "$GITHUB_OUTPUT"
          else
            echo "run_ok=false" >> "$GITHUB_OUTPUT"
            echo "Not within ±${WINDOW_MIN} minutes — fast exit."
          fi

      - name: Ensure requirements.txt
        if: steps.tgate.outputs.run_ok == 'true'
        run: |
          if [ ! -f requirements.txt ]; then
            cat > requirements.txt <<'REQ'
requests
pandas
numpy
python-dateutil
REQ
          fi

      - name: Setup Python
        if: steps.tgate.outputs.run_ok == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install deps
        if: steps.tgate.outputs.run_ok == 'true'
        run: pip install -r requirements.txt

      - name: Mask token (log hygiene)
        if: steps.tgate.outputs.run_ok == 'true'
        run: echo "::add-mask::${{ secrets.TRADIER_TOKEN }}"

      # ---- SKIP if already ran today (UTC) ----
      - name: Skip if already ran today (UTC)
        id: skipcheck
        if: steps.tgate.outputs.run_ok == 'true'
        shell: bash
        run: |
          set -euo pipefail
          DATE_DIR="data/$(date -u +%Y-%m-%d)"
          if [ -d "$DATE_DIR" ]; then
            echo "already=true" >> "$GITHUB_OUTPUT"
            echo "Run already completed for $DATE_DIR — skipping Producer steps."
            exit 0
          else
            echo "already=false" >> "$GITHUB_OUTPUT"
          fi

      # ===== PRODUCER (ONLY when not already produced) =====
      - name: Run overlay script (your original)
        if: steps.tgate.outputs.run_ok == 'true' && steps.skipcheck.outputs.already == 'false'
        shell: bash
        env:
          TRADIER_TOKEN: ${{ secrets.TRADIER_TOKEN }}
        run: |
          set -euo pipefail
          python leaps_batched_cached.py

      - name: Build Actual Option P/L (fallback-safe)
        if: steps.tgate.outputs.run_ok == 'true' && steps.skipcheck.outputs.already == 'false'
        env:
          TRADIER_TOKEN: ${{ secrets.TRADIER_TOKEN }}
        run: |
          if [ -f tools/option_pl_builder.py ]; then
            python tools/option_pl_builder.py
          else
            echo "option_pl_builder.py not present; skipping."
          fi

      - name: Enrich overlay with intraday VWAP (optional)
        if: steps.tgate.outputs.run_ok == 'true' && steps.skipcheck.outputs.already == 'false'
        run: |
          if [ -f tools/enrich_overlay_with_vwap.py ]; then
            python tools/enrich_overlay_with_vwap.py --overlay overlay_vwap_macd_rsi.csv || true
          fi

      - name: Commit daily artifacts to repo
        if: steps.tgate.outputs.run_ok == 'true' && steps.skipcheck.outputs.already == 'false'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "LEAPS daily overlay (producer)"
          branch: ${{ env.BRANCH }}
          add_options: '-A'

      # ---- Publish a static mirror of the day folder to GitHub Pages ----
      - name: Resolve today date_dir (UTC)
        if: steps.tgate.outputs.run_ok == 'true'
        id: setdate
        run: echo "date_dir=$(date -u +%Y-%m-%d)" >> "$GITHUB_OUTPUT"

      - name: Publish CSV mirror to gh-pages
        if: steps.tgate.outputs.run_ok == 'true'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: data/${{ steps.setdate.outputs.date_dir }}
          destination_dir: data/${{ steps.setdate.outputs.date_dir }}
          keep_files: true

      # ===== CONSUMER (always runs if within gate) =====
      - name: Make fetch tool executable
        if: steps.tgate.outputs.run_ok == 'true'
        run: |
          chmod +x .github/tools/fetch.sh

      - name: Resolve effective date_dir (prefer latest.json; ≤24h else fallback -1d)
        if: steps.tgate.outputs.run_ok == 'true'
        id: datedir
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ env.REPO }}
          BRANCH: ${{ env.BRANCH }}
        run: |
          set -euo pipefail
          mkdir -p tmp
          # Try latest.json via API/raw/pages with our fetcher
          .github/tools/fetch.sh latest.json tmp/latest.json || true
          if [ -s tmp/latest.json ]; then
            DATE_DIR="$(jq -r '.date_dir // empty' tmp/latest.json)"
          fi
          if [ -z "${DATE_DIR:-}" ]; then
            # List data/ via API and choose newest YYYY-MM-DD
            curl -fsSL -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              "https://api.github.com/repos/${REPO}/contents/data?ref=${BRANCH}" > tmp/list.json
            DATE_DIR="$(jq -r '[ .[] | select(.type=="dir") | .name ]
                                | map(select(test("^[0-9]{4}-[0-9]{2}-[0-9]{2}$")))
                                | sort | last // empty' tmp/list.json)"
          fi
          if [ -z "${DATE_DIR:-}" ]; then
            echo "::error ::Could not resolve a data/YYYY-MM-DD folder"
            exit 1
          fi

          # Ensure ≤24h; else fallback to yesterday
          python - <<'PY'
import os,datetime,sys
d = os.environ["DATE_DIR"]
dt = datetime.datetime.strptime(d,"%Y-%m-%d")
age_h = (datetime.datetime.utcnow()-dt).total_seconds()/3600.0
if age_h>24:
    y=(datetime.datetime.utcnow()-datetime.timedelta(days=1)).strftime("%Y-%m-%d")
    print(y)
else:
    print(d)
PY
          > tmp/dd.txt
          echo "date_dir=$(cat tmp/dd.txt)" >> "$GITHUB_OUTPUT"

      - name: Fetch overlay/PL/gap with fallback chain (raw → API → Pages)
        if: steps.tgate.outputs.run_ok == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ env.REPO }}
          BRANCH: ${{ env.BRANCH }}
          OWNER: ${{ env.OWNER }}
        run: |
          set -euo pipefail
          DD="${{ steps.datedir.outputs.date_dir }}"
          .github/tools/fetch.sh \
            "data/${DD}/overlay_vwap_macd_rsi.csv" overlay.csv \
            "data/${DD}/option_pl.csv"            option_pl.csv \
            "data/${DD}/gapdown_above_100sma.csv" gap.csv

      - name: Emit quick summary to Job Summary
        if: steps.tgate.outputs.run_ok == 'true'
        run: |
          {
            echo "### LEAPS Overlay (${OWNER}/${REPO} → ${BRANCH})"
            echo ""
            echo "**date_dir:** ${{ steps.datedir.outputs.date_dir }}"
            echo ""
            echo "**overlay.csv (head):**"
            head -5 overlay.csv || true
            echo ""
            echo "**option_pl.csv (head):**"
            head -5 option_pl.csv || true
            echo ""
            echo "**gapdown_above_100sma.csv (head):**"
            head -5 gap.csv || true
          } >> "$GITHUB_STEP_SUMMARY"

      # If a second cron fires outside the window, the early gate prevents work.
      # If a second cron *does* land inside the window, the skipcheck earlier
      # will have created today's folder and the Producer steps won't run.
